//| mill-version: 1.0.1
//| repositories:
//| - https://central.sonatype.com/repository/maven-snapshots
//| - https://oss.sonatype.org/content/repositories/snapshots
//| mvnDeps:
//| - com.carlosedp::mill-aliases::1.1.0
//| - com.goyeau::mill-scalafix::0.6.0
//| - org.typelevel::scalac-options:0.1.7

package build

import mill.*
import mill.scalalib.*
import mill.scalalib.scalafmt.*
import mill.scalalib.publish.*

import com.carlosedp.aliases.*
import com.goyeau.mill.scalafix.ScalafixModule
import org.typelevel.scalacoptions.*

object versions:
  val pluginName   = "mill-aliases"
  val millVersions = Seq("1.0.0") // scala-steward:off
  val scala3       = "3.7.1"

def millBinaryVersion(millVersion: String) = millVersion.split('.').head

object plugin extends Cross[Plugin](versions.millVersions)

trait Plugin extends Cross.Module[String]
    with ScalaModule
    with Publish
    with ScalafixModule
    with ScalafmtModule:

  val millVersion  = crossValue
  def scalaVersion = versions.scala3
  def artifactName = s"${versions.pluginName}_mill${millBinaryVersion(millVersion)}"

  def compileMvnDeps = super.compileMvnDeps() ++ Seq(
    mvn"com.lihaoyi::mill-libs:${millVersion}"
  )
  def scalacOptions = Task:
    super.scalacOptions() ++
      ScalacOptions.defaultTokensForVersion(ScalaVersion.unsafeFromString(scalaVersion()))

  object integration extends ScalaTests with TestModule.Utest:
    def mvnDeps = Seq(
      mvn"com.lihaoyi::mill-testkit:$millVersion"
    )
    def forkEnv = Task:
      Map(
        "MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString,
        "MILL_USER_TEST_REPO"  -> s"file://${publishLocalTestRepo().path.toString}",
        "TEST_PLUGIN_VERSION"  -> publishVersion().toString,
      )
    object millExecutable extends JavaModule:
      def mvnDeps   = Seq(mvn"com.lihaoyi:mill-runner-launcher_3:$millVersion")
      def mainClass = Some("mill.launcher.MillLauncherMain")

end Plugin

trait Publish extends SonatypeCentralPublishModule:
  override def pomSettings = PomSettings(
    description = "A Mill plugin to allow the creation of aliases to common-use tasks.",
    organization = "com.carlosedp",
    url = "https://github.com/carlosedp/mill-aliases",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github(owner = "carlosedp", repo = "mill-aliases"),
    developers = Seq(
      Developer(
        "carlosedp",
        "Carlos Eduardo de Paula",
        "https://github.com/carlosedp",
      )
    ),
  )

  def publishVersion = Task {
    val isTag      = Task.env.get("GITHUB_REF").exists(_.startsWith("refs/tags"))
    val currentTag = os.proc("git", "describe", "--tags", "--abbrev=0").call().out.trim()
    val commits    = os.proc("git", "rev-list", "--count", s"$currentTag..HEAD").call().out.trim().toInt
    if isTag && commits == 0 then currentTag.stripPrefix("v")
    else
      val Array(major, minor, patch) = currentTag.stripPrefix("v").split('.').map(_.toInt)
      s"$major.${minor + 1}.$patch-SNAPSHOT"
  }

end Publish

object MyAliases extends Aliases:
  def fmt      = alias("mill.scalalib.scalafmt/ __.sources")
  def checkfmt = alias("mill.scalalib.scalafmt/checkFormatAll __.sources")
  def lint     = alias("mill.scalalib.scalafmt/ __.sources", "__.fix")
  def deps     = alias("mill.scalalib.Dependency/showUpdates")
  def pub      = alias("mill.scalalib.SonatypeCentralPublishModule/")
  def publocal = alias("__.publishLocal")
  def testall  = alias("__.integration")

  // Test aliases that reference other aliases
  def fmtAndCheck = alias("fmt", "checkfmt")
  def fullPrep    = alias("fmt", "lint", "__.compile")
